
{
  "//": "This block is for the terraform block",
  "terraform": {
    "required_version": ">= 0.15.0"
  },

  "//": "This block is for the provider block",
  "provider": {
    "aws": [
      {
        "region": "eu-west-2"
      }
    ]
  },

  "//": "This block is for the resource block",
  "resource": {
    "aws_ecr_repository": {
      "ecr_example": {
        "name": "mss",
        "image_scanning_configuration": {
          "scan_on_push": true
        }
      }
    }
  },
  "module": {
    "vpc": {
      "azs": [
        "eu-west-2a",
        "eu-west-2b",
        "eu-west-2c"
      ],
      "cidr": "172.16.0.0/16",
      "enable_nat_gateway": true,
      "enable_vpn_gateway": true,
      "name": "mss-vpc",
      "private_subnets": [
        "172.16.1.0/24",
        "172.16.2.0/24",
        "172.16.3.0/24"
      ],
      "public_subnets": [
        "172.16.101.0/24",
        "172.16.102.0/24",
        "172.16.103.0/24"
      ],
      "source": "terraform-aws-modules/vpc/aws",
      "version": "3.14.1",
      "tags": {
        "Name": "mss",
        "Environment": "dev",
        "Terraform": "true"
      }
    },
    "vote_service_sg": {
      "description": "Security group for user-service with custom ports open within VPC, and PostgreSQL publicly open",
      "ingress_cidr_blocks": [
        "172.16.0.0/16"
      ],
      "ingress_rules": [
        "https-443-tcp"
      ],
      "ingress_with_cidr_blocks": [
        {
          "cidr_blocks": "172.16.0.0/16",
          "description": "User-service ports",
          "from_port": 8080,
          "protocol": "tcp",
          "to_port": 8090
        }
      ],
      "name": "user-service",
      "source": "terraform-aws-modules/security-group/aws",
      "vpc_id": "${module.vpc.vpc_id}"
    },
    "lambda_function_in_vpc": {
      "attach_network_policy": true,
      "description": "My awesome lambda function",
      "function_name": "my-lambda-in-vpc",
      "handler": "index.lambda_handler",
      "runtime": "python3.8",
      "source": "terraform-aws-modules/lambda/aws",
      "source_path": "PoC_Terraform_Json",
      "vpc_security_group_ids": "${[module.vote_service_sg.security_group_id]}",
      "vpc_subnet_ids": "${module.vpc.public_subnets}"
    },
  "api_gateway": [
    {
      "cors_configuration": [
        {
          "allow_headers": [
            "content-type",
            "x-amz-date",
            "authorization",
            "x-api-key",
            "x-amz-security-token",
            "x-amz-user-agent"
          ],
          "allow_methods": [
            "*"
          ],
          "allow_origins": [
            "*"
          ]
        }
      ],
      "default_stage_access_log_destination_arn": "arn:aws:logs:eu-west-1:835367859851:log-group:debug-apigateway",
      "default_stage_access_log_format": "$context.identity.sourceIp - - [$context.requestTime] \"$context.httpMethod $context.routeKey $context.protocol\" $context.status $context.responseLength $context.requestId $context.integrationErrorMessage",
      "description": "My awesome HTTP API Gateway",
      "domain_name": "terraform-aws-modules.modules.tf",
      "domain_name_certificate_arn": "arn:aws:acm:eu-west-1:052235179155:certificate/2b3a7ed9-05e1-4f9e-952b-27744ba06da6",
      "integrations": [
        {
          "$default": [
            {
              "lambda_arn": "arn:aws:lambda:eu-west-1:052235179155:function:my-default-function"
            }
          ],
          "GET /some-route-with-authorizer": [
            {
              "authorizer_key": "azure",
              "integration_type": "HTTP_PROXY",
              "integration_uri": "some url"
            }
          ],
          "POST /": [
            {
              "lambda_arn": "arn:aws:lambda:eu-west-1:052235179155:function:my-function",
              "payload_format_version": "2.0",
              "timeout_milliseconds": 12000
            }
          ]
        }
      ],
      "name": "dev-http",
      "protocol_type": "HTTP",
      "source": "terraform-aws-modules/apigateway-v2/aws",
      "tags": [
        {
          "Name": "http-apigateway"
        }
      ]
    }
  ]
  },

  "data": [
    {
      "aws_iam_policy_document": [
        {
          "resource_full_access": [
            {
              "statement": [
                {
                  "actions": [
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:GetObject",
                    "s3:DeleteObject",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:GetBucketLocation",
                    "s3:AbortMultipartUpload"
                  ],
                  "effect": "Allow",
                  "resources": [
                    "arn:aws:s3:::bucketname/path/*"
                  ],
                  "sid": "FullAccess"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "aws_iam_policy_document": [
        {
          "base": [
            {
              "statement": [
                {
                  "actions": [
                    "s3:ListBucket",
                    "s3:ListBucketVersions"
                  ],
                  "effect": "Allow",
                  "resources": [
                    "arn:aws:s3:::bucketname"
                  ],
                  "sid": "BaseAccess"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
    "//": "This block is for the output block",
    "output": {
      "registry_id": {
        "value": "${aws_ecr_repository.ecr_example.name}",
        "sensitive": false
      },
      "repository_url": {
        "value": "${aws_ecr_repository.ecr_example.repository_url}",
        "sensitive": true
      }
    }
}
