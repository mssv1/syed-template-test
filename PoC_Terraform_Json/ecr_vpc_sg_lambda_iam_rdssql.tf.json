
{
  "//": "This block is for the terraform block",
  "terraform": {
    "required_version": ">= 0.15.0"
  },

  "//": "This block is for the provider block",
  "provider": {
    "aws": [
      {
        "region": "eu-west-2"
      }
    ]
  },

  "//": "This block is for the resource block",
  "resource": {
    "aws_ecr_repository": {
      "ecr_example": {
        "name": "mss",
        "image_scanning_configuration": {
          "scan_on_push": true
        }
      }
    }
  },
  "module": {
    "vpc": {
      "azs": [
        "eu-west-2a",
        "eu-west-2b",
        "eu-west-2c"
      ],
      "cidr": "172.16.0.0/16",
      "enable_nat_gateway": true,
      "enable_vpn_gateway": true,
      "name": "mss-vpc",
      "private_subnets": [
        "172.16.1.0/24",
        "172.16.2.0/24",
        "172.16.3.0/24"
      ],
      "public_subnets": [
        "172.16.101.0/24",
        "172.16.102.0/24",
        "172.16.103.0/24"
      ],
      "source": "terraform-aws-modules/vpc/aws",
      "version": "3.14.1",
      "tags": {
        "Name": "mss",
        "Environment": "dev",
        "Terraform": "true"
      }
    },
    "vote_service_sg": {
      "description": "Security group for user-service with custom ports open within VPC, and PostgreSQL publicly open",
      "ingress_cidr_blocks": [
        "172.16.0.0/16"
      ],
      "ingress_rules": [
        "https-443-tcp"
      ],
      "ingress_with_cidr_blocks": [
        {
          "cidr_blocks": "172.16.0.0/16",
          "description": "User-service ports",
          "from_port": 8080,
          "protocol": "tcp",
          "to_port": 8090
        }
      ],
      "name": "user-service",
      "source": "terraform-aws-modules/security-group/aws",
      "vpc_id": "${module.vpc.vpc_id}"
    },
    "lambda_function_in_vpc": {
      "attach_network_policy": true,
      "description": "My awesome lambda function",
      "function_name": "my-lambda-in-vpc",
      "handler": "index.lambda_handler",
      "runtime": "python3.8",
      "source": "terraform-aws-modules/lambda/aws",
      "source_path": "PoC_Terraform_Json",
      "vpc_security_group_ids": "${[module.vote_service_sg.security_group_id]}",
      "vpc_subnet_ids": "${module.vpc.public_subnets}"
    },
    "db": [
      {
        "allocated_storage": 5,
        "backup_window": "03:00-06:00",
        "create_db_subnet_group": true,
        "create_monitoring_role": true,
        "db_name": "demodb",
        "deletion_protection": true,
        "engine": "mysql",
        "engine_version": "5.7.25",
        "family": "mysql5.7",
        "iam_database_authentication_enabled": true,
        "identifier": "demodb",
        "instance_class": "db.t3a.large",
        "maintenance_window": "Mon:00:00-Mon:03:00",
        "major_engine_version": "5.7",
        "monitoring_interval": "30",
        "monitoring_role_name": "MyRDSMonitoringRole",
        "options": [
          {
            "option_name": "MARIADB_AUDIT_PLUGIN",
            "option_settings": [
              {
                "name": "SERVER_AUDIT_EVENTS",
                "value": "CONNECT"
              },
              {
                "name": "SERVER_AUDIT_FILE_ROTATIONS",
                "value": "37"
              }
            ]
          }
        ],
        "parameters": [
          {
            "name": "character_set_client",
            "value": "utf8mb4"
          },
          {
            "name": "character_set_server",
            "value": "utf8mb4"
          }
        ],
        "port": "3306",
        "source": "terraform-aws-modules/rds/aws",
        "subnet_ids": [
          "subnet-12345678",
          "subnet-87654321"
        ],
        "tags": {
          "Name": "mss",
          "Environment": "dev",
          "Terraform": "true"
        }
      }]
  },
  "data": [
    {
      "aws_iam_policy_document": [
        {
          "resource_full_access": [
            {
              "statement": [
                {
                  "actions": [
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:GetObject",
                    "s3:DeleteObject",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:GetBucketLocation",
                    "s3:AbortMultipartUpload"
                  ],
                  "effect": "Allow",
                  "resources": [
                    "arn:aws:s3:::bucketname/path/*"
                  ],
                  "sid": "FullAccess"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "aws_iam_policy_document": [
        {
          "base": [
            {
              "statement": [
                {
                  "actions": [
                    "s3:ListBucket",
                    "s3:ListBucketVersions"
                  ],
                  "effect": "Allow",
                  "resources": [
                    "arn:aws:s3:::bucketname"
                  ],
                  "sid": "BaseAccess"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
    "//": "This block is for the output block",
    "output": {
      "registry_id": {
        "value": "${aws_ecr_repository.ecr_example.name}",
        "sensitive": false
      },
      "repository_url": {
        "value": "${aws_ecr_repository.ecr_example.repository_url}",
        "sensitive": true
      }
    }
}
